// <auto-generated />
using System;
using Engagement.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Engagement.Infrastructure.Migrations
{
    [DbContext(typeof(EngagementContext))]
    [Migration("20240131131712_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Engagement.Domain.CampaignAggregate.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Campaign", (string)null);
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Answers.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answer", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Answer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<uint>("Order")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Question", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Questions.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("MultipleChoiceQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<uint>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Engagement.Domain.SurveyAggregate.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("SendingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Survey", (string)null);
                });

            modelBuilder.Entity("Engagement.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasBaseType("Engagement.Domain.QuestionAggregate.Answers.Answer");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OptionId");

                    b.HasDiscriminator().HasValue("multiple_choice");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Answers.RangeAnswer", b =>
                {
                    b.HasBaseType("Engagement.Domain.QuestionAggregate.Answers.Answer");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("RangeAnswer_Value");

                    b.HasDiscriminator().HasValue("range");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Answers.TextAnswer", b =>
                {
                    b.HasBaseType("Engagement.Domain.QuestionAggregate.Answers.Answer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextAnswer_Value");

                    b.HasDiscriminator().HasValue("text");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Questions.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("Engagement.Domain.QuestionAggregate.Question");

                    b.HasDiscriminator().HasValue("multiple_choice");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Questions.RangeQuestion", b =>
                {
                    b.HasBaseType("Engagement.Domain.QuestionAggregate.Question");

                    b.HasDiscriminator().HasValue("range");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Questions.TextQuestion", b =>
                {
                    b.HasBaseType("Engagement.Domain.QuestionAggregate.Question");

                    b.HasDiscriminator().HasValue("text");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Answers.Answer", b =>
                {
                    b.HasOne("Engagement.Domain.QuestionAggregate.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.HasOne("Engagement.Domain.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Question", b =>
                {
                    b.HasOne("Engagement.Domain.SurveyAggregate.Survey", null)
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Questions.Option", b =>
                {
                    b.HasOne("Engagement.Domain.QuestionAggregate.Questions.MultipleChoiceQuestion", null)
                        .WithMany("Options")
                        .HasForeignKey("MultipleChoiceQuestionId");
                });

            modelBuilder.Entity("Engagement.Domain.SurveyAggregate.Survey", b =>
                {
                    b.HasOne("Engagement.Domain.CampaignAggregate.Campaign", null)
                        .WithMany("Surveys")
                        .HasForeignKey("CampaignId");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasOne("Engagement.Domain.QuestionAggregate.Questions.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Engagement.Domain.CampaignAggregate.Campaign", b =>
                {
                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Engagement.Domain.SurveyAggregate.Survey", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Engagement.Domain.QuestionAggregate.Questions.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
